# -*- encoding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution	
#    Copyright (C) 2004-2009 Tiny SPRL (<http://tiny.be>). All Rights Reserved
#    $Id$
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from osv import osv
from osv import fields
import time

#******************************************************************************************
#   Querys Library 
#******************************************************************************************
class financial_reports(osv.osv):
    _inherit = 'financial.reports'

    _columns = {
    }

    def init(self, cr):
        # Returns account_id and childs
        cr.execute("""
drop type IF EXISTS getChildren_type CASCADE;
CREATE TYPE getChildren_type AS (child_id integer, concat_1 integer[]);
DROP FUNCTION IF EXISTS getChildrenAndConsol(integer);

CREATE OR REPLACE FUNCTION getChildrenAndConsol(account_id integer) RETURNS getChildren_type AS $$
DECLARE
r1 getChildren_type%ROWTYPE; r2 getChildren_type%ROWTYPE; r3 getChildren_type%ROWTYPE;
ids2 integer[] ;
count integer;
index integer := 1; 
BEGIN
    FOR r1 IN SELECT id FROM account_account 
        WHERE parent_left >= (SELECT parent_left FROM account_account WHERE id = account_id) 
        AND parent_left < (SELECT parent_right FROM account_account WHERE id = account_id)
        ORDER BY code
    LOOP
        ids2 := array_append(ids2, r1.child_id) ;
    END LOOP;
    r1.concat_1 := ids2;
    RETURN r1;
END
$$ language 'plpgsql';
        """)

        # Create Data Type for return the records generated by account report getLedger
        cr.execute("""
DROP type IF EXISTS getLedger_type CASCADE;
CREATE TYPE getLedger_type AS (
	account_id  		integer, 
	account_code  		varchar, 		
	account_name  		varchar, 		
	initial  		numeric, 		
	line_debit  		numeric, 		
	line_credit  		numeric, 		
	balance  		numeric, 
	cost_center_code  	varchar, 	
	cost_center_name  	varchar, 	
	line_date  		varchar, 	
	line_journal  		varchar, 		
	line_move_id  		varchar,		
	line_move 	 	varchar, 		
	line_id 	 	varchar, 		
	partner_name 	 	varchar, 		
	line_ref 	 	varchar, 		
	line_name 	 	varchar, 
	reconcile 	 	varchar, 		
	reconcile_partial  	varchar, 
	payment_date	 	varchar,
	credit_days 		varchar,
	mature			varchar,
	to_mature		numeric,
	range_0			numeric,
	range_1			numeric,
	range_2			numeric,
	out_range 		numeric,
	amount_currency		numeric,
	currency		integer,
	uto_mature		numeric,
	urange_0 		numeric,
	urange_1 		numeric,
	urange_2 		numeric,
	uout_range 		numeric,
	ubalance 		numeric,
	title			varchar
	); 
        """)

        # Account Report
        cr.execute("""
CREATE OR REPLACE FUNCTION getledger(
    acc_id integer, 
    date_start date, 
    date_stop date, 
    category character varying, 
    query_partner character varying, 
    cc integer, 
    balance_report boolean, 
    group_by_partner boolean, 
    zero boolean, 
    reconcil boolean, 
    aged boolean, 
    period_length integer, 
    currency integer, 
    partner_type character varying, 
    fiscalyear boolean,
	journal_ids		varchar
    )
  RETURNS SETOF getledger_type AS
$$
DECLARE
    r1 getChildren_type%ROWTYPE	; r2 getChildren_type%ROWTYPE	; r6 getLedger_type%ROWTYPE	; period record	;
    r3 record         		; r4 record			; r5 record			; partners record	;
    fields record; pg record;
    acc integer[]     		; all_accounts integer[] 	; all_partners integer[] 	;
    all_category_partners integer[] 	                        ; cash_journal integer[] 	;period_ids 	integer[];

    initial numeric := 0.00	; initial2 numeric   		; balance numeric 		;balance2 numeric 	;
    v_progresive numeric	;  

    indx integer := 1		; part integer    		; aged_days	integer:= 0 	; 

    query varchar := '' 	; query_order varchar		; query_line varchar		; 
    query_currency varchar := '';
    query_partner1 varchar := ''; query_partner2 varchar := ''	; query_cc varchar := ''	;
    query_partner_type1 varchar := ''                           ; query_partner_type2 varchar := '';    
    query_reconcile varchar:= ''; total_text varchar := 'TOTAL DE EMPRESA';
    query_reconcile_balance varchar:= '' ; query_fiscalyear varchar := '' ;
    v timestamp                 ; v1 timestamp                 ;
    start_0 		date;
    stop_0 		date;
    name_0 		varchar;
    start_1 		date;
    stop_1 		date;
    name_1 		varchar;
    start_2 		date;
    stop_2 		date;
    name_2 		varchar;
    sum_to_mature 	numeric := 0;
    sum_0 		numeric := 0;
    sum_1 		numeric := 0;
    sum_2 		numeric := 0;
    sum_out 		numeric := 0;
    usum_to_mature 	numeric := 0;
    usum_0 		numeric := 0;
    usum_1 		numeric := 0;
    usum_2 		numeric := 0;
    usum_out 		numeric := 0;
    usum_balance        numeric := 0;
        
BEGIN
--RAISE NOTICE 'Prueba : %', array_dims(all_partners);
    v := timeofday();						 -- Cargar tiempo inicial
    query_order := 'ORDER BY name';

    -- FISCALYEAR
    IF fiscalyear = True THEN
	FOR period IN SELECT p.id FROM account_fiscalyear f LEFT JOIN account_period p ON (f.id = p.fiscalyear_id)
	WHERE date_stop BETWEEN f.date_start AND f.date_stop
	OR date_start BETWEEN f.date_start AND f.date_stop
	LOOP
	    period_ids := array_append(period_ids, period.id) ;
	END LOOP;
	query_fiscalyear := ' AND period_id = ANY ('||quote_literal(period_ids)||') ' ; 
	
    END IF;

    -- CURRENCY
    IF currency = 0 THEN
	query_currency := ''; 
    ELSIF currency = 1 THEN
	query_currency := ' AND ((currency_id IS NULL OR currency_id=1) AND (amount_currency IS NULL OR amount_currency=0)) '; 
    ELSE
	query_currency := ' AND (currency_id = '||quote_literal(currency)||' AND amount_currency IS NOT NULL) '; 
    END IF;

    -- PARTNERS TYPE
    IF partner_type = 'customer' THEN 
	query_partner_type1 := ' AND p.customer = True ' ;
	FOR partners IN EXECUTE 'SELECT id FROM res_partner p WHERE p.customer = True '
	LOOP
            all_category_partners := array_append(all_category_partners, partners.id) ;
	END LOOP;
	query_partner_type2 := ' AND l.partner_id = ANY ('||quote_literal(all_category_partners)||') ' ;
    ELSIF partner_type = 'supplier' THEN 
	query_partner_type1 := ' AND p.supplier = True ' ;
RAISE NOTICE 'partner_type : %', partner_type ;
	FOR partners IN EXECUTE 'SELECT id FROM res_partner p WHERE p.supplier = True '
	LOOP
            all_category_partners := array_append(all_category_partners, partners.id) ;
	END LOOP;
	query_partner_type2 := ' AND l.partner_id = ANY ('||quote_literal(all_category_partners)||') ' ;
    END IF;

    -- PARTNERS
    IF query_partner <> '' THEN 
	query_partner1 := ' AND (p.id IN '||query_partner||query_partner_type1||') ';
	query_partner2 := ' AND (l.partner_id IN '|| query_partner||query_partner_type2||') ' ;
    END IF;

    -- CATEGORY
    IF category <> '' THEN
	query := 'SELECT id FROM res_partner p LEFT JOIN res_partner_category_rel c ON (p.id = c.partner_id) 
	      WHERE c.category_id in '||category||' AND p.active = True ';
    ELSE
	query := 'SELECT id FROM res_partner p WHERE p.active = True ';
    END IF;

    -- OBTIANE TODOS LOS PARTNERS EN ARRAY all_partners
    FOR partners IN EXECUTE query || query_partner1 || query_partner_type1 || query_order
    LOOP
        all_partners := array_append(all_partners, partners.id) ;
    END LOOP;

    -- QUERY CC
    SELECT c.oid, n.nspname, c.relname INTO pg FROM pg_catalog.pg_class c
	LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname ~ '^(account_move_line)$' AND pg_catalog.pg_table_is_visible(c.oid) ORDER BY 2, 3;

    FOR fields IN
    SELECT a.attname, pg_catalog.format_type(a.atttypid,a.atttypmod), (SELECT substring(pg_catalog.pg_get_expr(d.adbin,
	d.adrelid) for 128) FROM pg_catalog.pg_attrdef d WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum 
	AND a.atthasdef), a.attnotnull, a.attnum FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = pg.oid AND a.attnum > 0 AND NOT a.attisdropped ORDER BY a.attnum
    LOOP
	IF fields.attname = 'cost_center_id' THEN
	    IF cc > 0 THEN 
		query_cc := ' AND cost_center_id = '|| quote_literal(cc) ;
	    END IF;
	END IF;
    END LOOP;

    -- QUERY RECONCILE PARA HACER CORTES DE FECHA
    IF reconcil = True THEN 
	query_reconcile_balance := ' AND (l.reconcile_id IS NULL OR b.date >= ' || quote_literal(date_stop)||') ';
	query_reconcile := ' AND (reconcile_id IS NULL OR payment_date >= '|| quote_literal(date_stop)||') ';
    END IF;
    IF balance_report THEN
	total_text := '' ;
    END IF;
    
    -- OBTIENE CUENTAS CONTABLES E HIJOS
    SELECT * INTO r1 FROM getChildrenAndConsol(acc_id);					
    all_accounts := r1.concat_1 ;							

    FOR r3 IN SELECT distinct(id) FROM account_journal WHERE type = 'cash'
	LOOP
            cash_journal := array_append(cash_journal, r3.id) ;
        END LOOP;

    DROP TABLE IF EXISTS account_move_line_bnk;
    CREATE TEMPORARY TABLE account_move_line_bnk (
    id integer, 
    date date
    );

    DROP TABLE IF EXISTS all_lines;
    CREATE TEMPORARY TABLE all_lines (
	account_id integer, 
	account_code varchar, 
	account_name varchar, 
	cost_center_id integer, 
	cost_center_code varchar, 
	cost_center_name varchar, 
	line_date date, 
	line_journal varchar, 
	line_move_id integer, 
	line_move varchar, 
	line_id integer, 
	partner_id integer, 
	partner_name varchar, 
	line_ref varchar, 
	line_name varchar, 
	line_debit numeric, 
	line_credit numeric, 
	reconcile varchar, 
	reconcile_partial varchar, 
	progresive integer, 
	payment_date date, 
	reconcile_id integer,
	date_maturity date,
	amount_currency numeric,
	currency_id integer,
	period_id integer);

    INSERT INTO account_move_line_bnk
	SELECT l.id AS id,
	CASE WHEN 
	(SELECT max(date) FROM account_move_line WHERE l.reconcile_id = reconcile_id AND l.journal_id = ANY (cash_journal))
	IS NOT NULL
	THEN (SELECT max(date) FROM account_move_line WHERE l.reconcile_id = reconcile_id 
	AND l.journal_id = ANY (cash_journal)) ELSE
        (SELECT max(date) FROM account_move_line WHERE l.reconcile_id = reconcile_id) END AS date
	FROM account_move_line l
	LEFT JOIN account_journal j ON (l.journal_id = j.id)
	WHERE 
	l.date <= date_stop
	AND l.reconcile_id IS NOT NULL
	AND l.account_id = ANY(all_accounts);

    IF query_cc = '' THEN
	INSERT INTO all_lines 
	SELECT 
	a.id AS	account_id, 
	a.code AS account_code, 
	a.name AS account_name, 
	NULL AS cost_center_id, 
	NULL AS cost_center_code, 
	NULL AS cost_center_name, 
	l.date AS line_date, 
	j.code AS line_journal, 
	m.id AS line_move_id, 
	m.name AS line_move, 
	l.id AS line_id, 
	p.id AS partner_id, 
	p.name AS partner_name, 
	CASE WHEN l.ref IS NOT NULL THEN l.ref ELSE '' END AS line_ref, 
	l.name AS line_name, 
	CASE WHEN l.debit IS NULL THEN 0 ELSE l.debit END AS line_debit, 
	CASE WHEN l.credit IS NULL THEN 0 ELSE l.credit END AS line_credit, 
	r.name AS reconcile, 
	rp.name AS reconcile_partial, 
	NULL, 
	bnk.date AS payment_date,
	l.reconcile_id AS reconcile_id, 
	l.date_maturity AS date_maturity,
	l.amount_currency AS amount_currency,
	l.currency_id AS currency_id,
	l.period_id AS period_id
       	FROM account_move_line l 
	LEFT JOIN account_journal        j              ON (l.journal_id     		= j.id    		)
	LEFT JOIN account_move           m              ON (l.move_id        		= m.id    		)
	LEFT JOIN account_account        a              ON (l.account_id     		= a.id    		)
	LEFT JOIN res_partner            p              ON (l.partner_id     		= p.id    		)
	LEFT JOIN account_move_reconcile r              ON (l.reconcile_id   		= r.id    		)
	LEFT JOIN account_move_reconcile rp             ON (l.reconcile_partial_id   	= rp.id   		)
	LEFT JOIN account_move_line_bnk  bnk            ON (l.id	   		= bnk.id		)
	WHERE l.account_id=ANY(all_accounts) AND l.date <= date_stop AND l.state = 'valid'
	;
    ELSE
	INSERT INTO all_lines 
	SELECT 
	a.id AS	account_id, 
	a.code AS account_code, 
	a.name AS account_name, 
	c.id AS cost_center_id, 
	c.code AS cost_center_code, 
	c.name AS cost_center_name, 
	l.date AS line_date, 
	j.code AS line_journal, 
	m.id AS line_move_id, 
	m.name AS line_move, 
	l.id AS line_id, 
	p.id AS partner_id, 
	p.name AS partner_name, 
	CASE WHEN l.ref IS NOT NULL THEN l.ref ELSE '' END AS line_ref, 
	l.name AS line_name, 
	CASE WHEN l.debit IS NULL THEN 0 ELSE l.debit END AS line_debit, 
	CASE WHEN l.credit IS NULL THEN 0 ELSE l.credit END AS line_credit, 
	r.name AS reconcile, 
	rp.name AS reconcile_partial, 
	NULL, 
	bnk.date AS payment_date,
	l.reconcile_id AS reconcile_id, 
	l.date_maturity AS date_maturity,
	l.amount_currency AS amount_currency,
	l.currency_id AS currency_id,
	l.period_id AS period_id
       	FROM account_move_line l 
	LEFT JOIN cost_center            c              ON (l.cost_center_id 		= c.id    		)
	LEFT JOIN account_journal        j              ON (l.journal_id     		= j.id    		)
	LEFT JOIN account_move           m              ON (l.move_id        		= m.id    		)
	LEFT JOIN account_account        a              ON (l.account_id     		= a.id    		)
	LEFT JOIN res_partner            p              ON (l.partner_id     		= p.id    		)
	LEFT JOIN account_move_reconcile r              ON (l.reconcile_id   		= r.id    		)
	LEFT JOIN account_move_reconcile rp             ON (l.reconcile_partial_id   	= rp.id   		)
	LEFT JOIN account_move_line_bnk  bnk            ON (l.id	   		= bnk.id		)
	WHERE l.account_id=ANY(all_accounts) AND l.date <= date_stop AND l.state = 'valid'
	;
    END IF;
	
    /* ##################################################################
			Generacion de Datos de Salida
       ##################################################################	
    */ 
    IF aged = True THEN
	/*
			Genera Total ANTIGUEDAD DE SALDOS
	*/

	stop_2 	:= date_stop;
	start_2 := stop_2 - period_length;
	stop_1 	:= start_2 - 1;
	start_1 := stop_1 - period_length;
	stop_0 	:= start_1 - 1;
	start_0 := stop_0 - period_length;
	name_2 	:= '2';
	name_1 	:= '1';
	name_0 	:= '0';

    IF (currency != 0 AND currency != 1) THEN

	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND '||quote_literal(date_stop)||' - date_maturity < 0 '
	||' OR date_maturity IS NULL AND '||quote_literal(date_stop)||' - line_date < 0 )'
	|| query_currency
	|| query_reconcile || query_cc INTO usum_to_mature;
	
	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_2)||' AND '||quote_literal(stop_2)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_2)||' AND '||quote_literal(stop_2)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO usum_2;

	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_1)||' AND '||quote_literal(stop_1)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_1)||' AND '||quote_literal(stop_1)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO usum_1;

	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_0)||' AND '||quote_literal(stop_0)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_0)||' AND '||quote_literal(stop_0)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO usum_0;

	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND date_maturity < '||quote_literal(start_0)
	||' OR date_maturity IS NULL AND line_date < '||quote_literal(start_0)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO usum_out;

	usum_balance := usum_to_mature + usum_2 + usum_1 + usum_0 + usum_out;

    END IF;

	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND '||quote_literal(date_stop)||' - date_maturity < 0 '
	||' OR date_maturity IS NULL AND '||quote_literal(date_stop)||' - line_date < 0 )'
	|| query_currency
	|| query_reconcile || query_cc INTO sum_to_mature;
	
	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_2)||' AND '||quote_literal(stop_2)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_2)||' AND '||quote_literal(stop_2)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO sum_2;

	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_1)||' AND '||quote_literal(stop_1)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_1)||' AND '||quote_literal(stop_1)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO sum_1;

	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_0)||' AND '||quote_literal(stop_0)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_0)||' AND '||quote_literal(stop_0)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO sum_0;

	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = ANY ('||quote_literal(all_partners)||') '
	||' AND (date_maturity IS NOT NULL AND date_maturity < '||quote_literal(start_0)
	||' OR date_maturity IS NULL AND line_date < '||quote_literal(start_0)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO sum_out;

	EXECUTE 'SELECT 
	    sum(l.debit) AS debit, 
	    sum(l.credit) AS credit
	    FROM account_move_line l LEFT JOIN account_move_line_bnk b ON (l.id = b.id) 
	    WHERE partner_id = ANY ('||quote_literal(all_partners)||') '
	    || ' AND l.account_id = ANY ('||quote_literal(all_accounts)||') ' 
	    || ' AND l.date <=  '|| quote_literal(date_stop) 
	    || ' AND l.state = '||quote_literal('valid') 
	    || query_reconcile_balance 
	    || query_currency
	    || query_cc 
	    || query_currency
	    INTO r4 ;
	    
	balance := r4.debit - r4.credit ;
	RETURN QUERY SELECT 								-- Arma registro
	    Null::integer,
	    ''::varchar,
	    ''::varchar,
	    initial,
	    r4.debit, 
	    r4.credit, 
	    balance,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar, 
	    'GRAN TOTAL'::varchar, 
	    ''::varchar, 
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    sum_to_mature,
	    sum_2,
	    sum_1,
	    sum_0,
	    sum_out,
	    Null::numeric,
	    Null::integer,
	    usum_to_mature,
	    usum_2,
	    usum_1,
	    usum_0,
	    usum_out,
	    usum_balance,
	    't'::varchar
	    ;
	RETURN QUERY SELECT 								-- Arma registro
	    Null::integer,
	    ''::varchar,
	    ''::varchar,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar, 
	    ''::varchar, 
	    ''::varchar, 
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::integer,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    ''::varchar
	    ;
	/*
			AGED Genera Inicial, Debito, Credito y Balance de Partners
	*/

	<<for_aged>>
	WHILE all_partners[indx] > 0
	LOOP
	    part := all_partners[indx];
	    SELECT CASE WHEN (SELECT max(l.days) FROM account_payment_term pay
		LEFT JOIN account_payment_term_line l ON (pay.id = payment_id),
		ir_property prop, res_partner p	WHERE prop.name = 'property_payment_term'
		AND pay.id = replace(prop.value_reference, 'account.payment.term,', '')::integer
		AND p.id = replace(prop.res_id, 'res.partner,', '')::integer AND p.id = part)
		IS NULL THEN 0 ELSE 
		(SELECT max(l.days) FROM account_payment_term pay
		LEFT JOIN account_payment_term_line l ON (pay.id = payment_id),
		ir_property prop, res_partner p	WHERE prop.name = 'property_payment_term'
		AND pay.id = replace(prop.value_reference, 'account.payment.term,', '')::integer
		AND p.id = replace(prop.res_id, 'res.partner,', '')::integer AND p.id = part)
		END INTO aged_days;

	    SELECT 
		name, 
		CASE WHEN ref IS NULL THEN '' ELSE ref END
	        INTO r3 FROM res_partner WHERE id = part;
	    
	    EXECUTE 'SELECT 
		sum(l.debit)  AS debit, 
		sum(l.credit) AS credit
		FROM account_move_line l LEFT JOIN account_move_line_bnk b ON (l.id = b.id) 
		WHERE l.date <= '|| quote_literal(date_stop) 
		|| ' AND l.partner_id = '||quote_literal(part) 
		|| ' AND l.account_id = ANY ('||quote_literal(all_accounts)||') ' 
		|| ' AND l.state = '||quote_literal('valid') 
		|| query_reconcile_balance 
		|| query_cc 
		|| query_currency
		INTO r4 ;
		
	    balance := r4.debit - r4.credit ;
	    indx := indx + 1;
	    IF zero = False THEN
		CONTINUE for_aged WHEN (r4.debit IS NULL OR r4.debit=0) AND (r4.credit IS NULL OR r4.credit=0) ;
	    END IF;

	IF (currency != 0 AND currency != 1)  THEN

	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND '||quote_literal(date_stop)||' - date_maturity < 0 '
	||' OR date_maturity IS NULL AND '||quote_literal(date_stop)||' - line_date < 0 )'
	|| query_currency
	|| query_reconcile || query_cc INTO usum_to_mature;
	
	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_2)||' AND '||quote_literal(stop_2)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_2)||' AND '||quote_literal(stop_2)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO usum_2;

	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_1)||' AND '||quote_literal(stop_1)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_1)||' AND '||quote_literal(stop_1)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO usum_1;

	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_0)||' AND '||quote_literal(stop_0)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_0)||' AND '||quote_literal(stop_0)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO usum_0;

	EXECUTE 'SELECT	CASE WHEN sum(amount_currency) IS NULL THEN 0 ELSE sum(amount_currency) END
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND date_maturity < '||quote_literal(start_0)
	||' OR date_maturity IS NULL AND line_date < '||quote_literal(start_0)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO usum_out;

	usum_balance := usum_to_mature + usum_2 + usum_1 + usum_0 + usum_out;

        IF zero = False THEN
	    CONTINUE for_aged WHEN (r4.debit + r4.credit) = 0;
	    IF (currency != 0 AND currency != 1) THEN
		CONTINUE for_aged WHEN usum_balance = 0;
	    END IF;
	END IF;

        END IF;

	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND '||quote_literal(date_stop)||' - date_maturity < 0 '
	||' OR date_maturity IS NULL AND '||quote_literal(date_stop)||' - line_date < 0 )'
	|| query_currency
	|| query_reconcile || query_cc INTO sum_to_mature;
	
	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_2)||' AND '||quote_literal(stop_2)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_2)||' AND '||quote_literal(stop_2)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO sum_2;

	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_1)||' AND '||quote_literal(stop_1)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_1)||' AND '||quote_literal(stop_1)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO sum_1;

	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND date_maturity BETWEEN '||quote_literal(start_0)||' AND '||quote_literal(stop_0)
	||' OR date_maturity IS NULL AND line_date BETWEEN '||quote_literal(start_0)||' AND '||quote_literal(stop_0)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO sum_0;

	EXECUTE 'SELECT	sum(line_debit) - sum(line_credit)
	FROM all_lines 
	WHERE account_id = ANY ('||quote_literal(all_accounts)||') '
	||' AND partner_id = '|| quote_literal(part) 
	||' AND (date_maturity IS NOT NULL AND date_maturity < '||quote_literal(start_0)
	||' OR date_maturity IS NULL AND line_date < '||quote_literal(start_0)||') '
	|| query_currency
	|| query_reconcile || query_cc INTO sum_out;

	IF balance_report = False THEN
	    RETURN QUERY SELECT 								-- Arma registro
	    Null::integer,
	    ''::varchar,
	    ''::varchar,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar, 
	    ''::varchar, 
	    ''::varchar, 
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::integer,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    ''::varchar
	    ;
	END IF;
	    RETURN QUERY SELECT 								-- Arma registro
		Null::integer,
		''::varchar,--r3.ref,
		''::varchar,--r3.name,
		initial,
		r4.debit, 
		r4.credit, 
		balance,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar, 
		r3.name,--''::varchar, 
		''::varchar, 
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		sum_to_mature,
		sum_2,
		sum_1,
		sum_0,
		sum_out,
		Null::numeric,
		Null::integer,
		usum_to_mature,
		usum_2,
		usum_1,
		usum_0,
		usum_out,
		usum_balance,
		't'::varchar
		;

	/*
			Genera Detalle de Partners   A G E D
	*/
	    CONTINUE for_aged WHEN balance_report ;

	    v_progresive := initial ;
	    FOR r6 IN 									-- Genera Registros de Lineas
	        EXECUTE 'SELECT 
		account_id, 
		account_code,
		account_name,
		Null,
		line_debit, 
		line_credit, 
		progresive,
		cost_center_code,
		cost_center_name,
		line_date, 
		line_journal,
		line_move_id::varchar,
		line_move,
		line_id::varchar,
		partner_name, 
		line_ref, 
		line_name, 
		CASE WHEN reconcile IS NULL THEN '||quote_literal('')||' ELSE reconcile END,
		CASE WHEN reconcile_partial IS NULL THEN '||quote_literal('')||' ELSE reconcile_partial END,
		CASE WHEN payment_date IS NULL THEN '||quote_literal('')||' ELSE payment_date::text END,
		'||quote_literal(aged_days)||',

		CASE WHEN date_maturity IS NOT NULL THEN '||quote_literal(date_stop)||' - date_maturity
		ELSE '||quote_literal(date_stop)||' - line_date END,

		CASE WHEN date_maturity IS NOT NULL AND '||quote_literal(date_stop)||' - date_maturity < 0 
		THEN line_debit - line_credit 
		WHEN date_maturity IS NULL AND '||quote_literal(date_stop)||' - line_date < 0 
		THEN line_debit - line_credit 
		ELSE Null END,

		CASE WHEN date_maturity IS NOT NULL AND date_maturity >= '||quote_literal(start_2)||' 
		AND date_maturity <= '||quote_literal(stop_2)||' THEN line_debit - line_credit 
		WHEN date_maturity IS NULL AND line_date >= '||quote_literal(start_2)||' 
		AND line_date <= '||quote_literal(stop_2)||' THEN line_debit - line_credit
		ELSE Null END,

		CASE WHEN date_maturity IS NOT NULL AND date_maturity >= '||quote_literal(start_1)||' 
		AND date_maturity <= '||quote_literal(stop_1)||' THEN line_debit - line_credit 
		WHEN date_maturity IS NULL AND line_date >= '||quote_literal(start_1)||' 
		AND line_date <= '||quote_literal(stop_1)||' THEN line_debit - line_credit 
		ELSE Null END,

		CASE WHEN date_maturity IS NOT NULL AND date_maturity >= '||quote_literal(start_0)||' 
		AND date_maturity <= '||quote_literal(stop_0)||' THEN line_debit - line_credit 
		WHEN date_maturity IS NULL AND line_date >= '||quote_literal(start_0)||' 
		AND line_date <= '||quote_literal(stop_0)||' THEN line_debit - line_credit 
		ELSE Null END,

		CASE WHEN date_maturity IS NOT NULL AND date_maturity < '||quote_literal(start_0)||' 
		THEN line_debit - line_credit 
		WHEN date_maturity IS NULL AND line_date < '||quote_literal(start_0)||' THEN line_debit - line_credit 
		ELSE Null END,

		amount_currency,
		currency_id,

		CASE WHEN date_maturity IS NOT NULL AND '||quote_literal(date_stop)||' - date_maturity < 0 
		THEN amount_currency 
		WHEN date_maturity IS NULL AND '||quote_literal(date_stop)||' - line_date < 0 
		THEN line_debit - line_credit 
		ELSE Null END,

		CASE WHEN date_maturity IS NOT NULL AND date_maturity >= '||quote_literal(start_2)||' 
		AND date_maturity <= '||quote_literal(stop_2)||' THEN amount_currency 
		WHEN date_maturity IS NULL AND line_date >= '||quote_literal(start_2)||' 
		AND line_date <= '||quote_literal(stop_2)||' THEN amount_currency
		ELSE Null END,

		CASE WHEN date_maturity IS NOT NULL AND date_maturity >= '||quote_literal(start_1)||' 
		AND date_maturity <= '||quote_literal(stop_1)||' THEN amount_currency 
		WHEN date_maturity IS NULL AND line_date >= '||quote_literal(start_1)||' 
		AND line_date <= '||quote_literal(stop_1)||' THEN amount_currency 
		ELSE Null END,

		CASE WHEN date_maturity IS NOT NULL AND date_maturity >= '||quote_literal(start_0)||' 
		AND date_maturity <= '||quote_literal(stop_0)||' THEN amount_currency 
		WHEN date_maturity IS NULL AND line_date >= '||quote_literal(start_0)||' 
		AND line_date <= '||quote_literal(stop_0)||' THEN amount_currency
		ELSE Null END,

		CASE WHEN date_maturity IS NOT NULL AND date_maturity < '||quote_literal(start_0)||' 
		THEN amount_currency 
		WHEN date_maturity IS NULL AND line_date < '||quote_literal(start_0)||' THEN amount_currency 
		ELSE Null END

		
		FROM all_lines 
		WHERE (line_debit - line_credit) <> 0 AND account_id = ANY ('||quote_literal(all_accounts)||') '
		|| ' AND partner_id = '|| quote_literal(part)
		|| query_reconcile
		|| query_cc 
		|| query_currency
		|| ' ORDER BY line_date ASC '
		LOOP
		    v_progresive := v_progresive + r6.line_debit - r6.line_credit ;
		    r6.balance := v_progresive ;
		    RETURN NEXT r6;	
		END LOOP;
        END LOOP;    
	
  ELSE
  /*
		Reporte agrupado por  C U E N T A S 
  */
    IF group_by_partner = False THEN
	<<group_by_account>>
	WHILE all_accounts[indx] > 0
	LOOP
            SELECT * INTO r3 FROM account_account WHERE id = all_accounts[indx];	-- Codigo y Nobre de Cuenta

	    SELECT * INTO r2 FROM getChildrenAndConsol(all_accounts[indx]);
	    acc := r2.concat_1;
											-- Calculo Saldo Initial
	    EXECUTE 'SELECT 
	    CASE WHEN SUM(l.debit) - SUM(l.credit) IS NULL THEN 0.00 ELSE SUM(l.debit) - SUM(l.credit) END
	    FROM account_move_line l  	
	    WHERE account_id = ANY ('||quote_literal(acc)||') '
	    || 'AND l.date < '|| quote_literal(date_start)
	    || ' AND l.state = '||quote_literal('valid') 
	    || query_partner2 
	    || query_fiscalyear 
	    || query_cc INTO initial ;

	    EXECUTE 'SELECT 	
	    CASE WHEN sum(l.debit)  IS NULL THEN 0.00 ELSE sum(l.debit)  END AS debit, 
	    CASE WHEN sum(l.credit) IS NULL THEN 0.00 ELSE sum(l.credit) END AS credit
	    FROM account_move_line l LEFT JOIN account_move_line_bnk b ON (l.id = b.id) 
	    WHERE l.account_id = ANY ('||quote_literal(acc)||') '
	    || 'AND l.date <=  '|| quote_literal(date_stop) 
	    || 'AND l.date >= '|| quote_literal(date_start) 
	    || 'AND l.state = '||quote_literal('valid') 
	    || query_reconcile_balance 
	    || query_partner2 
	    || query_cc INTO r4 ;

	    balance := initial + r4.debit - r4.credit;					-- Calcula Saldo

	    indx := indx + 1;
	    IF zero = False THEN
		CONTINUE group_by_account WHEN (initial + r4.debit + r4.credit) = 0;
	    END IF;
 	    RETURN QUERY SELECT 							-- Arma registro
		r3.id,
		r3.code, 
		r3.name,
		initial,
		r4.debit, 
		r4.credit, 
		balance,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar, 
		''::varchar, 
		''::varchar, 
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::integer,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		't'::varchar
	    ;

	    CONTINUE group_by_account WHEN array_upper(acc, 1) <> array_lower(acc, 1) = True;			--
	    CONTINUE group_by_account WHEN balance_report = True;
RAISE NOTICE 'balance 1 : %,%,%', array_upper(acc, 1) <> array_lower(acc, 1), balance_report, acc ;

	    v_progresive := initial ;
	    FOR r6 IN 									-- Genera Registros de Lineas
	        EXECUTE 'SELECT 
		account_id, 
		account_code,
		account_name,
		Null,
		line_debit, 
		line_credit, 
		progresive,
		cost_center_code,
		cost_center_name,
		line_date, 
		line_journal,
		line_move_id::varchar,
		line_move,
		line_id::varchar,
		partner_name, 
		line_ref, 
		line_name, 
		CASE WHEN reconcile IS NULL THEN '||quote_literal('')||' ELSE reconcile END,
		CASE WHEN reconcile_partial IS NULL THEN '||quote_literal('')||' ELSE reconcile_partial END,
		CASE WHEN payment_date IS NULL THEN '||quote_literal('')||' ELSE payment_date::text END
		FROM all_lines l 
		WHERE line_debit - line_credit <> 0 AND account_id = ANY ('||quote_literal(acc)||') '
		|| 'AND line_date >= '|| quote_literal(date_start)
		|| query_reconcile
		|| query_partner2 
		|| query_cc 		
		|| ' order by line_date asc'
		LOOP
		    v_progresive := v_progresive + r6.line_debit - r6.line_credit ;
		    r6.balance := v_progresive ;
		    RETURN NEXT r6;	
		END LOOP;
		
	END LOOP;    
    ELSE
	/*
			Genera Total Agrupado por Partners
	*/
	EXECUTE 'SELECT 
	    CASE WHEN (sum(debit) - sum(credit)) IS NULL THEN 0.00 ELSE (sum(debit) - sum(credit)) END
	    FROM account_move_line l WHERE partner_id = ANY ('|| quote_literal(all_partners)|| ') '
	    || 'AND date < '|| quote_literal(date_start) 
	    || ' AND account_id = ANY ('||quote_literal(all_accounts)||') ' 
	    || ' AND l.state = '||quote_literal('valid') 
	    || query_fiscalyear 
	    || query_cc 
	    INTO initial ;
	    
	EXECUTE 'SELECT 
	    CASE WHEN sum(l.debit)  IS NULL THEN 0.00 ELSE sum(l.debit)  END AS debit, 
	    CASE WHEN sum(l.credit) IS NULL THEN 0.00 ELSE sum(l.credit) END AS credit
	    FROM account_move_line l LEFT JOIN account_move_line_bnk b ON (l.id = b.id) 
	    WHERE partner_id = ANY ('||quote_literal(all_partners)||') '
	    || 'AND l.date >= '|| quote_literal(date_start) 
	    || 'AND l.date <=  '|| quote_literal(date_stop) 
	    || ' AND l.account_id = ANY ('||quote_literal(all_accounts)||') ' 
	    || ' AND l.state = '||quote_literal('valid') 
	    || query_reconcile_balance 
	    || query_cc 
	    INTO r4 ;
	    
	balance := initial + r4.debit - r4.credit ;
	RETURN QUERY SELECT 								-- Arma registro
	    Null::integer,
	    ''::varchar,
	    'T O T A L '::varchar,
	    initial,
	    r4.debit, 
	    r4.credit, 
	    balance,
	    ''::varchar,
	    ''::varchar,
  	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    ''::varchar, 
	    ''::varchar, 
	    ''::varchar, 
	    ''::varchar,
	    ''::varchar,
  	    ''::varchar,
	    ''::varchar,
	    ''::varchar,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::integer,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    Null::numeric,
	    't'::varchar
	    ;

	/*
			Genera Inicial, Debito, Credito y Balance de Partners
	*/
	<<for_partner>>
	WHILE all_partners[indx] > 0
	LOOP
	    part := all_partners[indx];
	    EXECUTE 'SELECT CASE WHEN (sum(debit) - sum(credit)) IS NULL THEN 0.00 ELSE (sum(debit) - sum(credit)) END
		FROM account_move_line l WHERE '
		|| ' date < '||quote_literal(date_start)
		|| ' AND partner_id = '|| quote_literal(part) 
		|| ' AND account_id = ANY ('||quote_literal(all_accounts)||') ' 
		|| ' AND l.state = '||quote_literal('valid') 
		|| query_fiscalyear 
		INTO initial ;
		
	    SELECT name, CASE WHEN ref IS NULL THEN '' ELSE ref END
	        INTO r3 FROM res_partner WHERE id = part;
	    
	    EXECUTE 'SELECT 
		CASE WHEN sum(l.debit)  IS NULL THEN 0.00 ELSE sum(l.debit)  END AS debit, 
		CASE WHEN sum(l.credit) IS NULL THEN 0.00 ELSE sum(l.credit) END AS credit
		FROM account_move_line l LEFT JOIN account_move_line_bnk b ON (l.id = b.id) 
		WHERE l.date >= '||quote_literal(date_start) 
		|| 'AND l.date <=  '|| quote_literal(date_stop) 
		|| ' AND l.partner_id = '||quote_literal(part) 
		|| ' AND l.account_id = ANY ('||quote_literal(all_accounts)||') ' 
		|| ' AND l.state = '||quote_literal('valid') 
		|| query_reconcile_balance 
		|| query_cc 
		INTO r4 ;
		
	    balance := initial + r4.debit - r4.credit ;
	    indx := indx + 1;
	    IF zero = False THEN
		CONTINUE for_partner WHEN (initial + r4.debit + r4.credit) = 0;
	    END IF;
	    
	    RETURN QUERY SELECT 								-- Arma registro
		Null::integer,
		''::varchar,
		r3.name,
		initial,
		r4.debit, 
		r4.credit, 
		balance,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar, 
		''::varchar, 
		''::varchar, 
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		''::varchar,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::integer,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		Null::numeric,
		't'::varchar
		;

	/*
			Genera Detalle de Partners
	*/
	    CONTINUE for_partner WHEN balance_report ;

	    v_progresive := initial ;
	    FOR r6 IN 									-- Genera Registros de Lineas
	        EXECUTE 'SELECT 
		account_id, 
		account_code,
		account_name,
		Null,
		line_debit, 
		line_credit, 
		progresive,
		cost_center_code,
		cost_center_name,
		line_date, 
		line_journal,
		line_move_id::varchar,
		line_move,
		line_id::varchar,
		partner_name, 
		line_ref, 
		line_name, 
		CASE WHEN reconcile IS NULL THEN '||quote_literal('')||' ELSE reconcile END,
		CASE WHEN reconcile_partial IS NULL THEN '||quote_literal('')||' ELSE reconcile_partial END,
		CASE WHEN payment_date IS NULL THEN '||quote_literal('')||' ELSE payment_date::text END
		FROM all_lines 
		WHERE (line_debit - line_credit) <> 0 AND account_id = ANY ('||quote_literal(all_accounts)||') '
		|| 'AND line_date >= '||quote_literal(date_start)
		|| ' AND partner_id = '|| quote_literal(part)
		|| query_reconcile
		|| query_cc
		|| ' ORDER BY line_date ASC '
		LOOP
		    v_progresive := v_progresive + r6.line_debit - r6.line_credit ;
		    r6.balance := v_progresive ;
		    RETURN NEXT r6;	
		END LOOP;
        END LOOP;    
    END IF;
  END IF;
END
$$ LANGUAGE plpgsql;
        """)

financial_reports()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:

